	 (define (tripplet max-m-value)
	 	(define (iter-loop m n)
	 		(cond ((<= m max-m-value) (cond ((< n m) (let ((a (- (square m) (square n)))
	 																									(b (* 2 m n))
	 																									(c (+ (square m) (square n))))
	 																							(append (list (list a b c))  (iter-loop m (+ n 1)))))
	 																		(else (iter-loop (+ m 1) 1))))
	 					(else  '())))
	 		(iter-loop 2 1))